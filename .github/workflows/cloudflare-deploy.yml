name: Deploy to Cloudflare

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  deploy-worker:
    name: Deploy Worker API
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/worker/package-lock.json

      - name: Install Worker dependencies
        working-directory: src/worker
        run: npm ci

      - name: Type check Worker
        working-directory: src/worker
        run: npm run type-check

      - name: Build Worker
        working-directory: src/worker
        run: npm run build

      - name: Deploy Worker to Cloudflare
        if: github.ref == 'refs/heads/main'
        working-directory: src/worker
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
        run: npx wrangler deploy --env production

      - name: Set Worker Secrets
        if: github.ref == 'refs/heads/main'
        working-directory: src/worker
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
        run: |
          echo "${{ secrets.DATABASE_URL }}" | npx wrangler secret put DATABASE_URL
          echo "${{ secrets.JWT_SECRET }}" | npx wrangler secret put JWT_SECRET
          echo "${{ secrets.JWT_REFRESH_SECRET }}" | npx wrangler secret put JWT_REFRESH_SECRET
          echo "${{ secrets.OPENAI_API_KEY }}" | npx wrangler secret put OPENAI_API_KEY
          echo "${{ secrets.ANTHROPIC_API_KEY }}" | npx wrangler secret put ANTHROPIC_API_KEY
          echo "${{ secrets.GOOGLE_API_KEY }}" | npx wrangler secret put GOOGLE_API_KEY

  deploy-pages:
    name: Deploy Frontend to Pages
    runs-on: ubuntu-latest
    needs: deploy-worker
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Build Next.js
        env:
          NEXT_PUBLIC_API_URL: https://api.omninode.app
          NEXT_PUBLIC_WS_URL: wss://api.omninode.app
        run: npm run build

      - name: Deploy to Cloudflare Pages
        if: github.ref == 'refs/heads/main'
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
        run: |
          npx wrangler pages deploy .next --project-name=omninode-frontend --branch=main

  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [deploy-worker, deploy-pages]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Check Worker Health
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://api.omninode.app/health)
          if [ $response -ne 200 ]; then
            echo "Worker health check failed with status $response"
            exit 1
          fi
          echo "Worker is healthy"

      - name: Check Worker Detailed Health
        run: |
          curl -s https://api.omninode.app/health/detailed | jq '.'

      - name: Check AI Providers
        run: |
          curl -s https://api.omninode.app/api/ai/health | jq '.'

      - name: Check Frontend
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://omninode.app)
          if [ $response -ne 200 ]; then
            echo "Frontend health check failed with status $response"
            exit 1
          fi
          echo "Frontend is healthy"

      - name: Notify Success
        if: success()
        run: |
          echo "✅ Deployment successful!"
          echo "Worker API: https://api.omninode.app"
          echo "Frontend: https://omninode.app"

      - name: Notify Failure
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          echo "Check the logs for details"